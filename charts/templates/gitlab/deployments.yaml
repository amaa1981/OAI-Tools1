{{- if .Values.gitlab -}}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{ $.Values.gitlab.app_name }}"
  namespace: "{{ $.Values.gitlab.namespace }}"
  labels:
    app: "{{ $.Values.gitlab.app_name }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ $.Values.gitlab.app_name }}"
  template:
    metadata:
      labels:
        app: "{{ $.Values.gitlab.app_name }}"
        deployment: "{{ $.Values.gitlab.app_name }}"
    spec:
      volumes:
      - name: gitlab-ce-volume-1
        persistentVolumeClaim:
          claimName: "{{ $.Values.gitlab.app_name }}-etc"
      - name: gitlab-ce-volume-2
        persistentVolumeClaim:
          claimName: "{{ $.Values.gitlab.app_name }}-data"
{{- if .Values.gitlab.cacert }}
      - name: gitlab-ca
        secret:
          defaultMode: 420
          items:
          - key: "ca-cert.crt"
            path: "ca-cert.crt"
          secretName: gitlab-ca
{{- end }}
      containers:
      - name: gitlab-ce
        image: "{{ .Values.gitlab.gitlab_image }}"
        ports:
        - containerPort: 22
          protocol: TCP
        - containerPort: 80 
          protocol: TCP
        env:
        - name: GITLAB_OMNIBUS_CONFIG
          value:
            root_pass='{{ $.Values.gitlab.root_password | default "kJ4e9qLkm4pOhQnbn7nE" }}';
            external_url "https://{{ $.Values.gitlab.app_name }}.{{ include "tl500.app_domain" . }}";
            nginx['listen_port']=80;
            nginx['listen_https']=false;
            gitlab_rails['initial_root_password']= '{{ $.Values.gitlab.root_password | default "kJ4e9qLkm4pOhQnbn7nE" }}';
            gitlab_rails['gitlab_port']=80;
            letsencrypt['enable'] = false;
            postgresql['enable']=false;
            gitlab_rails['db_host'] = '{{ $.Values.gitlab.app_name }}-postgresql';
            gitlab_rails['db_password']='{{ .Values.gitlab.postgres.password }}';
            gitlab_rails['db_username']='{{ .Values.gitlab.postgres.user }}';
            gitlab_rails['db_database']='{{ .Values.gitlab.postgres.db_name | default "gitlabhq_production" }}';
            redis['enable'] = false; 
            gitlab_rails['redis_host']='{{ $.Values.gitlab.app_name }}-redis';
            manage_accounts['enable'] = true;
            manage_storage_directories['manage_etc'] = false; 
            gitlab_shell['auth_file'] = '/gitlab-data/ssh/authorized_keys';
            git_data_dirs({ 'default' => { 'path' => '/gitlab-data/git-data' } });
            gitlab_rails['shared_path'] = '/gitlab-data/shared'; 
            gitlab_rails['uploads_directory'] = '/gitlab-data/uploads';
            gitlab_ci['builds_directory'] = '/gitlab-data/builds';
            prometheus_monitoring['enable'] = false;
            gitlab_rails['rack_attack_git_basic_auth'] = { 'enabled' => false, };
            gitlab_rails['ldap_enabled'] = true;
            gitlab_rails['ldap_servers'] = { 'main' => { 'label' => '{{ .Values.gitlab.label | default "LDAP" }}', 'host' => '{{ include "gitlab.ldap.uri" . }}', 'port' => '{{ include "gitlab.ldap.port" . }}', 'uid' => 'uid', 'bind_dn' => '{{ include "gitlab.ldap.bind_dn" . }}', 'password' => '{{ include "gitlab.ldap.bind_password" . }}', 'encryption' => '{{ include "gitlab.ldap.encryption" . }}', 'verify_certificates' => {{ .Values.gitlab.ldap.validate_certs | default false }}, 'allow_username_or_email_login' => true, 'block_auto_created_users' => false, 'active_directory' => false, 'base' => '{{ include "gitlab.ldap.base" . }}', 'user_filter' => '{{ include "gitlab.ldap.user_filter" . | default "" }}', 'attributes' => { 'username' => ['uid'], 'email' => ['mail'], 'name' => 'displayName' } } };
            gitlab_rails['gitlab_signup_enabled'] = false;
        resources:
          limits:
            cpu: '4'
            memory: 8Gi
          requests:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: gitlab-ce-volume-1
          mountPath: "/etc/gitlab"
        - name: gitlab-ce-volume-2
          mountPath: "/gitlab-data"
{{- if .Values.gitlab.cacert }}
        - name: gitlab-ca
          mountPath: /etc/gitlab-ssl
{{- end }}
        livenessProbe:
          httpGet:
            path: "/help"
            port: 80 
            scheme: HTTP
          initialDelaySeconds: 120
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: "/help"
            port: 80 
            scheme: HTTP
          initialDelaySeconds: 20
          timeoutSeconds: 1
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccount: "{{ $.Values.gitlab.app_name }}-user"
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{ $.Values.gitlab.app_name }}-redis"
  namespace: "{{ $.Values.gitlab.namespace }}"
  labels:
    app: "{{ $.Values.gitlab.app_name }}"
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: "{{ $.Values.gitlab.app_name }}"
  template:
    metadata:
      labels:
        app: "{{ $.Values.gitlab.app_name }}"
        deployment: "{{ $.Values.gitlab.app_name }}-redis"
    spec:
      volumes:
      - name: gitlab-ce-volume-4
        persistentVolumeClaim:
          claimName: "{{ $.Values.gitlab.app_name }}-redis-data"
      containers:
      - name: gitlab-ce-redis
        image: "{{ .Values.gitlab.redis_image }}"
        command:
        - "/bin/sh"
        - "-ec"
        args:
        - exec redis-server
        ports:
        - containerPort: 6379
          protocol: TCP
        resources:
          limits:
            cpu: '1'
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 300Mi
        volumeMounts:
        - name: gitlab-ce-volume-4
          mountPath: "/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{ $.Values.gitlab.app_name }}-postgresql"
  namespace: "{{ $.Values.gitlab.namespace }}"
  labels:
    app: "{{ $.Values.gitlab.app_name }}"
spec:
  strategy:
    type: Recreate 
  replicas: 1
  selector:
    matchLabels:
      app: "{{ $.Values.gitlab.app_name }}"
  template:
    metadata:
      labels:
        app: "{{ $.Values.gitlab.app_name }}"
        deployment: "{{ $.Values.gitlab.app_name }}-postgresql"
    spec:
      volumes:
      - name: gitlab-ce-volume-3
        persistentVolumeClaim:
          claimName: "{{ $.Values.gitlab.app_name }}-postgresql"
      containers:
      - name: gitlab-ce-postgresql
        image: "{{ .Values.gitlab.postgresql_image }}"
        ports:
        - containerPort: 5432
          protocol: TCP
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - psql -h 127.0.0.1 -U $POSTGRES_USER -q -d $POSTGRES_DB -c
              'SELECT 1'
        livenessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 30
          tcpSocket:
            port: 5432
        env:
        - name: POSTGRES_USER
          value: "{{ .Values.gitlab.postgres.user }}"
        - name: POSTGRES_PASSWORD
          value: "{{ .Values.gitlab.postgres.password }}"
        - name: POSTGRES_DB
          value: "{{ .Values.gitlab.postgres.db_name | default "gitlabhq_production" }}"
        - name: PGDATA 
          value: /var/lib/pgsql/data/userdata
        resources:
          limits:
            cpu: '1'
            memory: 1024Mi
          requests:
            cpu: 300m
            memory: 300Mi
        volumeMounts:
        - name: gitlab-ce-volume-3
          mountPath: "/var/lib/pgsql/data"
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
# ---
# # job needs to be here otherwise the $db_admin_pass changes
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: configure-postgresql
#   namespace: "{{ $.Values.gitlab.namespace }}"
#   labels:
#     app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
#     app.kubernetes.io/instance: {{ .Release.Name | quote }}
#     app.kubernetes.io/version: {{ .Chart.AppVersion }}
#     helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
#   annotations:
#     # This is what defines this resource as a hook. Without this line, the
#     # job is considered part of the release.
#     "helm.sh/hook": post-install,post-upgrade,post-rollback
#     "helm.sh/hook-weight": "-5"
#     "helm.sh/hook-delete-policy": hook-succeeded
# spec:
#   template:
#     spec:
#       containers:
#       - command:
#           - /bin/bash
#           - -c
#           - |
#             echo "Patching the postgresql, waiting a mo for it to be up ..."
#             sleep 30
#             /usr/bin/scl enable rh-postgresql96
#          export PGPASSWORD='{{/* $db_admin_pass */}}'
#             psql -h '{{ $.Values.gitlab.app_name }}-postgresql' -U postgres -d {{ .Values.gitlab.db_name | default "gitlabhq_production" }} -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm;'
#             exit 0
#         image: "registry.redhat.io/rhscl/postgresql-96-rhel7:latest"
#         imagePullPolicy: IfNotPresent
#         name: job
#         env:
#           - name: HOME
#             value: "/var/lib/pgsql"
#           - name: PGDATA
#             value: "/var/lib/pgsql/data/userdata"
#           - name: CONTAINER_SCRIPTS_PATH
#             value: "/usr/share/container-scripts/postgresql"
#       dnsPolicy: ClusterFirst
#       restartPolicy: OnFailure
#       terminationGracePeriodSeconds: 10
# {{- end -}}
# 